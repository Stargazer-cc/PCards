/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NewCardsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var NewCardsPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("music-card", (source, el, ctx) => {
      const data = this.parseYaml(source);
      this.renderMusicCard(data, el);
    });
    this.registerMarkdownCodeBlockProcessor("book-card", (source, el, ctx) => {
      const data = this.parseYaml(source);
      this.renderBookCard(data, el);
    });
    this.registerMarkdownCodeBlockProcessor("movie-card", (source, el, ctx) => {
      const data = this.parseYaml(source);
      this.renderMovieCard(data, el);
    });
  }
  parseYaml(source) {
    const lines = source.split("\n");
    const data = {};
    const meta = {};
    lines.forEach((line) => {
      const colonIndex = line.indexOf(":");
      if (colonIndex !== -1) {
        const key = line.substring(0, colonIndex).trim();
        const value = line.substring(colonIndex + 1).trim();
        if (key && value) {
          if (key === "tags") {
            data[key] = value.split(" ").filter((tag) => tag.trim());
          } else if (key === "meta") {
            return;
          } else if (key.startsWith("meta.")) {
            const metaKey = key.substring(5).trim();
            if (metaKey) {
              meta[metaKey] = value;
            }
          } else {
            data[key] = value;
          }
        }
      }
    });
    if (Object.keys(meta).length > 0) {
      data.meta = meta;
    }
    return data;
  }
  renderMusicCard(data, el) {
    const container = el.createDiv({ cls: "new-cards-container music-card" });
    if (data.cover) {
      const backgroundContainer = container.createDiv({ cls: "background-container" });
      backgroundContainer.createEl("img", {
        attr: { src: this.getCoverImageSrc(data.cover) }
      });
    }
    const coverContainer = container.createDiv({ cls: "cover-container" });
    const infoContainer = container.createDiv({ cls: "info-container" });
    if (data.cover) {
      const coverImg = coverContainer.createEl("img", {
        attr: { src: this.getCoverImageSrc(data.cover) },
        cls: "cover-image"
      });
    } else {
      coverContainer.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"/>
          <circle cx="12" cy="12" r="3"/>
        </svg>
      `;
    }
    infoContainer.createEl("h3", { text: data.title, cls: "card-info-title" });
    infoContainer.createEl("div", { text: data.artist, cls: "artist" });
    infoContainer.createEl("div", { text: data.year, cls: "year" });
    if (data.meta) {
      const metaContainer = infoContainer.createDiv({ cls: "meta-container" });
      Object.entries(data.meta).forEach(([key, value]) => {
        metaContainer.createEl("div", {
          cls: "meta-item",
          text: `${key}: ${value}`
        });
      });
    }
    infoContainer.createEl("p", { text: data.description, cls: "card-info-description" });
    if (data.tags && data.tags.length > 0) {
      const tagsContainer = infoContainer.createDiv({ cls: "card-tags-container" });
      data.tags.forEach((tag) => {
        tagsContainer.createEl("a", {
          text: tag,
          cls: "tag"
        });
      });
    }
  }
  renderBookCard(data, el) {
    const container = el.createDiv({ cls: "new-cards-container book-card" });
    if (data.cover) {
      const backgroundContainer = container.createDiv({ cls: "background-container" });
      backgroundContainer.createEl("img", {
        attr: { src: this.getCoverImageSrc(data.cover) }
      });
    }
    const coverContainer = container.createDiv({ cls: "cover-container" });
    const infoContainer = container.createDiv({ cls: "info-container" });
    if (data.cover) {
      const coverImg = coverContainer.createEl("img", {
        attr: { src: this.getCoverImageSrc(data.cover) },
        cls: "cover-image"
      });
    } else {
      coverContainer.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
          <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
        </svg>
      `;
    }
    infoContainer.createEl("h3", { text: data.title, cls: "card-info-title" });
    infoContainer.createEl("div", { text: data.author, cls: "author" });
    infoContainer.createEl("div", { text: data.year, cls: "year" });
    if (data.meta) {
      const metaContainer = infoContainer.createDiv({ cls: "meta-container" });
      Object.entries(data.meta).forEach(([key, value]) => {
        metaContainer.createEl("div", {
          cls: "meta-item",
          text: `${key}: ${value}`
        });
      });
    }
    infoContainer.createEl("p", { text: data.description, cls: "card-info-description" });
    if (data.tags && data.tags.length > 0) {
      const tagsContainer = infoContainer.createDiv({ cls: "card-tags-container" });
      data.tags.forEach((tag) => {
        tagsContainer.createEl("a", {
          text: tag,
          cls: "tag"
        });
      });
    }
  }
  renderMovieCard(data, el) {
    const container = el.createDiv({ cls: "new-cards-container movie-card" });
    if (data.cover) {
      const backgroundContainer = container.createDiv({ cls: "background-container" });
      backgroundContainer.createEl("img", {
        attr: { src: this.getCoverImageSrc(data.cover) }
      });
    }
    const coverContainer = container.createDiv({ cls: "cover-container" });
    const infoContainer = container.createDiv({ cls: "info-container" });
    if (data.cover) {
      const coverImg = coverContainer.createEl("img", {
        attr: { src: this.getCoverImageSrc(data.cover) },
        cls: "cover-image"
      });
    } else {
      coverContainer.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="2" y="2" width="20" height="20" rx="2.18" ry="2.18"/>
          <line x1="7" y1="2" x2="7" y2="22"/>
          <line x1="17" y1="2" x2="17" y2="22"/>
          <line x1="2" y1="12" x2="22" y2="12"/>
          <line x1="2" y1="7" x2="7" y2="7"/>
          <line x1="2" y1="17" x2="7" y2="17"/>
          <line x1="17" y1="17" x2="22" y2="17"/>
          <line x1="17" y1="7" x2="22" y2="7"/>
        </svg>
      `;
    }
    infoContainer.createEl("h3", { text: data.title, cls: "card-info-title" });
    infoContainer.createEl("div", { text: data.director, cls: "director" });
    infoContainer.createEl("div", { text: data.year, cls: "year" });
    if (data.meta) {
      const metaContainer = infoContainer.createDiv({ cls: "meta-container" });
      Object.entries(data.meta).forEach(([key, value]) => {
        metaContainer.createEl("div", {
          cls: "meta-item",
          text: `${key}: ${value}`
        });
      });
    }
    infoContainer.createEl("p", { text: data.description, cls: "card-info-description" });
    if (data.tags && data.tags.length > 0) {
      const tagsContainer = infoContainer.createDiv({ cls: "card-tags-container" });
      data.tags.forEach((tag) => {
        tagsContainer.createEl("a", {
          text: tag,
          cls: "tag"
        });
      });
    }
  }
  getCoverImageSrc(cover) {
    console.log("Received cover:", cover);
    if (cover.startsWith("http://") || cover.startsWith("https://")) {
      console.log("External URL detected:", cover);
      return cover;
    }
    const internalLinkMatch = cover.match(/!\[\[(.*?)(\|.*?)?\]\]/);
    if (internalLinkMatch && internalLinkMatch[1]) {
      let filename = internalLinkMatch[1].trim();
      console.log("Detected internal link, filename:", filename);
      const vault = this.app.vault;
      const file = vault.getAbstractFileByPath(filename) || vault.getFiles().find((f) => f.name === filename);
      if (file && file instanceof import_obsidian.TFile) {
        const resourcePath = vault.getResourcePath(file);
        console.log("Resolved file path:", resourcePath);
        return resourcePath;
      } else {
        console.log("File not found in vault:", filename);
      }
    }
    console.log("No valid cover found, returning empty string.");
    return "";
  }
  onunload() {
  }
};
